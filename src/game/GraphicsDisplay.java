package game;

import arrangement.ComplexArrangementPropertyFunctions;
import arrangement.GraphArrangementPropertyFunctions;
import buttons.*;
import graphTheory.Graph;
import graphTheory.Node;
import level.Level;
import arrangement.Arrangement;
import arrangement.ArrangementProperties;
import level.LevelPart;
import level.Property;
import shapes.Circle;
import shapes.Line;
import shapes.Point;
import shapes.Shape;

import java.awt.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import static arrangement.Arrangement.*;
import static game.Display.*;

//Original Screen : 1920x1030
//This Screen : 1523 * 814
//Scaling factor from original screen to this screen : .75

public class GraphicsDisplay {

    static StartButton playButton;

    static LevelButton[] levelButtons;

    public static LevelPartButton[] levelPartButtons;

    static Rectangle sideBarRectangle;

    static SideBarButton homeButton;
    static SideBarButton backButton;
    static SideBarButton questionButton;

    static Rectangle symbolsBarRectangle;

    static  Rectangle levelBarRectangle;

    static ClearUndoButton clearButton;
    static ClearUndoButton undoButton;

    static LinkedList<Line> wires = new LinkedList<>();


    public static final int ACTUAL_TOP_BUFFER = 26 + 4;
    public static final int ACTUAL_LEFT_BUFFER = 6;

    public static int TOP_BUFFER = ACTUAL_TOP_BUFFER;

    public static int LEFT_BUFFER = ACTUAL_LEFT_BUFFER;

    public static int SIDE_BAR_BUTTONS_VERTICAL_DISTANCE;


    public static double scalingFactor = 1;

    //TODO Remove this variable somehow?
    public static boolean currentArrangementDistinctAndUnmodified = false;

    public static int numToSubtractToMatchActualScreenWidth = 14;

    public static int screenWhiteWidth = 1523 - numToSubtractToMatchActualScreenWidth;
    public static int screenWhiteHeight = 814;





    public static int lastAddedShapeTooCloseCountdown = -1;
    public static int lastAddedShapeOutsideWhiteAreaCountdown = -1;
    public static int lastAddedShapeTooSmallCountdown = -1;
    public static int tooManyShapesCountdown = -1;

    public static void declarePlacementOfStuff()
    {
        SIDE_BAR_BUTTONS_VERTICAL_DISTANCE = 52;


        playButton = new StartButton(705 - 20, 330 + 50 - 20, 100 + 40, 100 + 40, "start");
        sideBarRectangle = new Rectangle(0, 0, 53, 814);


        homeButton = new SideBarButton(0, 0, 52, 52, "H");
        backButton = new SideBarButton(0, SIDE_BAR_BUTTONS_VERTICAL_DISTANCE, 52, 52, "B");
        questionButton = new SideBarButton(0, SIDE_BAR_BUTTONS_VERTICAL_DISTANCE * 2, 52, 52, "Q");


        int HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS = 165 - 2 - 4;
        int VERTICAL_TOP_FOR_LEVEL_BUTTONS = 90 - 60 - 30 - 1 - 60;

        int HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS = 60 + 5 + 5 + 5;
        int VERTICAL_SPACING_FOR_LEVEL_BUTTONS = 60 + 5 + 5 + 5;
        int LEVEL_BUTTON_SIZE = 60 + 5 + 5 + 5;


        double L0 = .25;
        double L1 = L0 + .75;
        double L2 = L1 + .625;
        double L3 = L2 + .75;
        double L4 = L3 + .25;

        double A0 = .25;


        //First TOP set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //First BOTTOM set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.75 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        ///First MIDDLE wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));

        //First vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (1.375 + A0)),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Second TOP set of wires + vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //Vertical
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //Middle
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25))));

        //Vertical
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));


        //Second BOTTOM set of wires + vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Vertical
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Middle
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75))));

        //Vertical
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));


        //Third TOP set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //Third BOTTOM set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));


        //Third vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));


        //First middle wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75))));

        //Vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75))));

        //Middle wire
        //wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));

        //Fourth vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Third set of MIDDLE wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.825),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.825),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.825),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.825),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth set of MIDDLE wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth MIDDLE wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));

        //Vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Middle Wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11.875),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));




        //Middle Wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 14.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 14.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 14.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 14.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth MIDDLE wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 15.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));


        levelButtons = new LevelButton[]{
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 0), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tutorial"),


                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL2"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (4 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL3"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dT1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dS1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dC1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dC2"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tC"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qC"),

                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iL"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sL"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iT"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sT"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iS"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sS"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (2 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iC"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (3 + L0), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sC"),


                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (4.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (4.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (4.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (4.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeC"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieC"),


                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (6.5 + L1)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciC"),




                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (8.5 + L2)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (8.5 + L2)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (8.5 + L2)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (8.5 + L2)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC4"),

                //new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (10 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (10 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (10 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (10 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC4"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (11 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (11 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (11 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (11 + L3)), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC4"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * (13 + L4)), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "the end"),
        };



        /*
        int HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS = 165 - 2;
        int VERTICAL_TOP_FOR_LEVEL_BUTTONS = 90 - 60 - 30 - 1 - 60;

        int HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS = 80 + 20 - 5 - 5;
        int VERTICAL_SPACING_FOR_LEVEL_BUTTONS = 60 + 5 + 5 + 5;
        int LEVEL_BUTTON_SIZE = 60 + 5 + 5 + 5;

        //First TOP set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //First BOTTOM set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        ///First MIDDLE wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));

        //First vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 1.375),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Second TOP set of wires + vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //Second BOTTOM set of wires + vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.125),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Third TOP set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (2.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (3.25 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4.25 + .5))));

        //Third BOTTOM set of wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (8.75 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 7.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Third set of MIDDLE wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.25),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Third vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (1.25 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (9.75 + .5))));

        //Fourth set of MIDDLE wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fourth vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 9.625),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth set of MIDDLE wires
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (6 + .5))));
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth vertical wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (4 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (7 + .5))));

        //Fifth MIDDLE wire
        wires.add(new Line((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.5),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5)), (int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 12.75),  (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * (5.5 + .5))));


        levelButtons = new LevelButton[]{
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 0), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tutorial"),

                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dT1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL2"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dL3"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dS1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dC1"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "dC2"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 1.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 2.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 3.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "tC"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4.25, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "qC"),

                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iL"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sL"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iT"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sT"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iS"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sS"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "iC"),
                new LevelButton(HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sC"),


                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 4.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "oeC"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ieC"),


                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciL"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciT"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 8.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciS"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 6.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 9.75, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ciC"),




                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 8.5), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,ieC4"),

                //new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 10), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "sh,ci,tC4"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 4, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC1"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC2"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 6, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC3"),
                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 11), VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 7, LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "ci,tC4"),

                new LevelButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_BUTTONS * 13), (int) (VERTICAL_TOP_FOR_LEVEL_BUTTONS + VERTICAL_SPACING_FOR_LEVEL_BUTTONS * 5.5), LEVEL_BUTTON_SIZE, LEVEL_BUTTON_SIZE, "the end"),
        };
        */


        int HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS = (int) (sideBarRectangle.getX() + sideBarRectangle.getWidth());
        int VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS = 0;

        double HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS =  (104.1 * 14 / 15);
        double LEVEL_PART_BUTTON_SIZE = (104.1 * 14 / 15);

        levelPartButtons = new LevelPartButton[] {
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 0), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 0),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 1), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 1),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 2), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 2),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 3), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 3),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 4), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 4),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 5), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 5),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 6), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 6),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 7), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 7),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 8), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 8),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 9), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 9),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 10), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 10),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 11), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 11),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 12), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 12),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 13), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 13),
                new LevelPartButton((int) (HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 14), VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, (int) (LEVEL_PART_BUTTON_SIZE), (int) (LEVEL_PART_BUTTON_SIZE), 14),
        };

        /*
        int HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS = 104;
        int LEVEL_PART_BUTTON_SIZE = 104;

        levelPartButtons = new LevelPartButton[] {
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 0, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 0),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 1, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 1),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 2, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 2),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 3, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 3),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 4, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 4),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 5, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 5),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 6, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 6),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 7, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 7),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 8, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 8),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 9, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 9),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 10, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 10),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 11, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 11),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 12, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 12),
                new LevelPartButton(HORIZONTAL_LEFT_FOR_LEVEL_PART_BUTTONS + HORIZONTAL_SPACING_FOR_LEVEL_PART_BUTTONS * 13, VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS, LEVEL_PART_BUTTON_SIZE, LEVEL_PART_BUTTON_SIZE, 13)
        };
        */


        symbolsBarRectangle = new Rectangle((int) (sideBarRectangle.getX() + sideBarRectangle.getWidth()), (int) (VERTICAL_TOP_FOR_LEVEL_PART_BUTTONS + LEVEL_PART_BUTTON_SIZE), 1523 - numToSubtractToMatchActualScreenWidth - (int) (sideBarRectangle.getX() + sideBarRectangle.getWidth()), 65);
        levelBarRectangle = new Rectangle(1150, (int) (symbolsBarRectangle.getY() + symbolsBarRectangle.getHeight()), 1523 - numToSubtractToMatchActualScreenWidth - 1150, 85);

        clearButton = new ClearUndoButton( levelBarRectangle.x + 17, levelBarRectangle.y, 85, 85, "C");
        undoButton = new ClearUndoButton(levelBarRectangle.x + 85 + 17 + 17, levelBarRectangle.y, 85, 85, "U");

    }

    public static void displayEverything(Graphics g1, int screenWidth, int screenHeight)
    {
        Graphics2D g = (Graphics2D) g1;
        Map<RenderingHints.Key, Object> hints = new HashMap<RenderingHints.Key, Object>();

        hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        hints.put(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
        hints.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHints(hints);



        updateScreenPlacement(screenWidth, screenHeight);

        //Pre-load images by drawing them on screen.
        if(currentScreen.equals("startScreen"))
        {
            playButton.display(g);
            displaySideBarInLevelMap(g);
            displayLevelBar(g);

            for(buttons.Button levelButton : levelButtons)
            {
                levelButton.display(g);
            }
        }

        fillBackground(screenWidth, screenHeight, g);

        if(currentScreen.equals("startScreen"))
        {
            g.setColor(MyColor.getColor("textBlack"));
            //g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));
            g.setFont(new Font("TimesRoman", Font.BOLD, (int) (60 * scalingFactor)));

            g.drawString("Arrangement", GraphicsDisplay.LEFT_BUFFER + (int) ((775 - 190) * scalingFactor), GraphicsDisplay.TOP_BUFFER + (int) ((275 - 50) * scalingFactor));

            g.setFont(new Font("TimesRoman", Font.BOLD, (int) (35 * scalingFactor)));
            g.drawString("A game by Olivia Brobin", GraphicsDisplay.LEFT_BUFFER + (int) ((755 - 185) * scalingFactor), GraphicsDisplay.TOP_BUFFER + (int) ((355 - 50) * scalingFactor));
            playButton.display(g);
            g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));
            g.drawString("Click to begin", GraphicsDisplay.LEFT_BUFFER + (int) ((890 - 220) * scalingFactor), GraphicsDisplay.TOP_BUFFER + (int) ((355 + 420 - 150) * scalingFactor));
        }
        else if(currentScreen.equals("levelMap"))
        {
            displaySideBarInLevelMap(g);

            for(buttons.Button levelButton : levelButtons)
            {
                levelButton.display(g);
            }

            displayWires(g);
        }
        else if(currentScreen.equals("level")){
            GraphicsDisplay.displayShapes(g);

            if(testingMode) {
                GraphicsDisplay.displayArrangementPropertiesVisual(g);
                GraphicsDisplay.displayArrangementPropertiesText(g);
            }

            if(!testingMode)
            {
                GraphicsDisplay.displaySymbolsBar(g);

                for (LevelPartButton levelPartButton : levelPartButtons) {
                    levelPartButton.display(g1, g);
                }

                displaySideBarInLevel(g);
                displayLevelBar(g);
                displayTutorialText(g);
            }

            displayRedMessage(g);
        }

        fillBackgroundOnTop(screenWidth, screenHeight, g);

        //drawCenterLines(screenWidth, screenHeight, g);

        //Image logoImage = Toolkit.getDefaultToolkit().getImage("Arrangement_Images/" + "intersectingCircles.png");
        //g.drawImage(Toolkit.getDefaultToolkit().getImage("Arrangement_Images/" + "intersectingCircles.png"), 50, 50, (int) logoImage.getWidth(null) / 10, logoImage.getHeight(null) / 10, null);
    }

    public static void updateScreenPlacement(int screenWidth, int screenHeight)
    {
        // 1523 / 814 = 1.871007

        double widthRatio = ((double) screenWidth - ACTUAL_LEFT_BUFFER) / (1523 - ACTUAL_LEFT_BUFFER);
        double heightRatio = ((double) screenHeight - ACTUAL_TOP_BUFFER) / (814 - ACTUAL_TOP_BUFFER);

        double ratio;
        if(widthRatio < heightRatio)
        {
            ratio = widthRatio;
        }
        else
        {
            ratio = heightRatio;
        }

        scalingFactor = ratio;

        if((screenHeight - (screenWidth / 1.871007)) > 0)
        {
            TOP_BUFFER = ACTUAL_TOP_BUFFER + (int) ((screenHeight - screenWidth / 1.871007) / 2.25);
            LEFT_BUFFER = ACTUAL_LEFT_BUFFER;
        }
        else {

            LEFT_BUFFER = ACTUAL_LEFT_BUFFER + (int) ((screenWidth - screenHeight * 1.871007) / 2);
            TOP_BUFFER = ACTUAL_TOP_BUFFER;
        }

        /*
        if((screenWidth / screenHeight) > 1.871007)
        {
            LEFT_BUFFER = ACTUAL_LEFT_BUFFER + (int) ((screenWidth - screenHeight * 1.871007) / 2);
        }
        else {
            LEFT_BUFFER = ACTUAL_LEFT_BUFFER;
        }
         */

    }

    public static void fillBackground(int screenWidth, int screenHeight, Graphics2D g)
    {
        //Fill Background
        g.setColor(MyColor.getColor("gameBackground"));
        g.fillRect(0, 0, screenWidth, screenHeight);

        //Fill Screen Background
        g.setColor(MyColor.getColor("screenBackground"));
        g.fillRect(LEFT_BUFFER, TOP_BUFFER, (int) (screenWhiteWidth * scalingFactor), (int) (screenWhiteHeight * scalingFactor));
    }

    public static void fillBackgroundOnTop(int screenWidth, int screenHeight, Graphics2D g)
    {
        //Fill Background
        g.setColor(MyColor.getColor("gameBackground"));
        //Above Screen
        g.fillRect(0, 0, screenWidth, TOP_BUFFER);
        //Below Screen
        g.fillRect(0, (int) (TOP_BUFFER + screenWhiteHeight * scalingFactor), screenWidth, (int) (screenHeight - screenWhiteHeight * scalingFactor - TOP_BUFFER));

        //Left Of Screen
        g.fillRect(0, 0, LEFT_BUFFER, screenHeight);
        //Right Of Screen
        g.fillRect((int) (LEFT_BUFFER + screenWhiteWidth * scalingFactor), 0, (int) (screenWidth - screenWhiteWidth * scalingFactor - LEFT_BUFFER), screenHeight);
    }

    public static void displayArrangementPropertiesText(Graphics2D g)
    {
        g.setColor(MyColor.getColor("textBlack"));
        g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));

        //Display arrangement properties
        int xOffset = (int) (LEFT_BUFFER + 937 * scalingFactor);
        int yOffset = (int) (TOP_BUFFER + 150 * scalingFactor);
        int verticalSpacing = (int) (30 * scalingFactor);

        g.drawString("Number of shapes: " + ArrangementProperties.getNumberOfShapes(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of points: " + ArrangementProperties.getNumberOfPoints(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of intersections: " + ArrangementProperties.getNumberOfIntersections(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of sections: " + ArrangementProperties.getNumberOfSections(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of complete overlaps: " + ArrangementProperties.getNumberOfCompleteOverlaps(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of co for distinct circles: " + ArrangementProperties.getNumberOfCompleteOverlapsForDistinctCircles(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of triangle sections: " + ArrangementProperties.getNumberOfTriangleSections(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of quadrilateral sections: " + ArrangementProperties.getNumberOfQuadrilateralSections(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of total edges: " + ArrangementProperties.getTotalNumberOfEdges(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of outside edges: " + ArrangementProperties.getNumberOfOutsideEdges(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of inside edges: " + ArrangementProperties.getNumberOfInsideEdges(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of contained intersections: " + ArrangementProperties.getNumberOfContainedIntersections(), xOffset, yOffset += verticalSpacing);
        g.drawString("Number of contained points: " + ArrangementProperties.getNumberOfContainedPoints(), xOffset, yOffset += verticalSpacing);

        //LinkedList<LinkedList<Node>> lineShapeNodes = Graph.getTriangleAndSquareNodes(getTrianglesAndSquares());


        LinkedList<LinkedList<Node>> nodeChains = GraphArrangementPropertyFunctions.getNodeChainsForTriangleAndSquareCluster(getTrianglesAndSquares());
        for(LinkedList<Node> setOfNodes: nodeChains) {
            g.drawString("nodes:" + setOfNodes.size(), xOffset, yOffset+=verticalSpacing);
        }


        //LinkedList<Node> nodes = Graph.getNodes(lineShapeNodes);


        //g.drawString("nodes: " + nodes.size(), xOffset, yOffset += verticalSpacing);

        //g.drawString("Is tested variable true: " + ArrangementProperties.isTestedVariableTrue(), xOffset, yOffset += verticalSpacing);
        //g.drawString("Scaling factor: " + scalingFactor, xOffset, yOffset += verticalSpacing);


        //Display intersections per side
        LinkedList<Integer> intersectionsPerSide = ArrangementProperties.getNumberOfIntersectionsPerSide();
        for(int numberOfIntersections: intersectionsPerSide) {
            g.drawString("Intersections:" + numberOfIntersections, xOffset, yOffset+=verticalSpacing);
        }
    }

    public static void displayShapes(Graphics2D g)
    {
        //Set color and stoke
        g.setColor(MyColor.getColor("shapeBlack"));
        g.setStroke(new BasicStroke((int) (3 * scalingFactor)));

        //Draw shapes
        for (Shape shape : Arrangement.getShapes()) {
            shape.draw(g);
        }

        //Draw current shape
        if (currentShape != null) {
            if(Display.shapeBeingDragged)
            {
                g.setColor(MyColor.getColor("shapeBeingDragged"));
            }
            if(Display.shapeBeingDeleted) {
                g.setColor(MyColor.getColor("shapeBeingDeleted"));
            }
            currentShape.draw(g);
        }
    }

    public static void displayArrangementPropertiesVisual(Graphics2D g)
    {
        //Draw circles where points are
        for (shapes.Point point : Arrangement.getPoints()) {
            g.setColor(MyColor.getColor("point"));
            g.fillOval((int) ((point.getX() - 4) * scalingFactor) + LEFT_BUFFER, (int) ((point.getY() - 4) * scalingFactor) + TOP_BUFFER, (int) (4 * 2 * scalingFactor), (int) (4 * 2 * scalingFactor));
        }

        //Draw circles where intersections are
        for (shapes.Point point : ArrangementProperties.getIntersections()) {
            g.setColor(MyColor.getColor("intersection"));
            g.fillOval((int) (point.getX() * scalingFactor) - 4 + LEFT_BUFFER, (int) ((point.getY() - 4) * scalingFactor) + TOP_BUFFER, (int) (4 * 2 * scalingFactor), (int) (4 * 2 * scalingFactor));
        }

        /*
        //Draw circles where contained points are
        for (shapes.Point point : ArrangementProperties.getContainedPointsForDistinct()) {
            g.setColor(Color.BLUE);
            g.fillOval((int) (point.getX() * scalingFactor) - 6 + LEFT_BUFFER, (int) ((point.getY() - 6) * scalingFactor) + TOP_BUFFER, (int) (6 * 2 * scalingFactor), (int) (6 * 2 * scalingFactor));

        }

        //Draw circles where contained intersections are
        for (Point point : ArrangementProperties.getContainedIntersectionsForDistinct()) {
            g.setColor(Color.RED);
            g.fillOval((int) (point.getX() * scalingFactor) - 6 + LEFT_BUFFER, (int) ((point.getY() - 6) * scalingFactor) + TOP_BUFFER, (int) (6 * 2 * scalingFactor), (int) (6 * 2 * scalingFactor));
        }
         */


        //TODO Add "times scaling factor"
        //Draw points where sections are defined
        /*
        for (LinkedList<Point> points : ArrangementProperties.getLineSections()) {
            for (Point point : points) {
                g.setColor(Color.YELLOW);
                g.fillOval(point.getX() - 12 + Display.LEFT_BUFFER, point.getY() - 12 + Display.TOP_BUFFER, 12 * 2, 12 * 2);
            }
        }

        for (LinkedList<Point> points : ArrangementPropertyFunctions.getTriangleAndSquareQuadrilateralSections()) {
            for (Point point : points) {
                

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                g.fillOval(point.getX() - 12 + Display.LEFT_BUFFER, point.getY() - 12 + Display.TOP_BUFFER, 12 * 2, 12 * 2);
            }
        }

        for (LinkedList<Point> points : ArrangementPropertyFunctions.getTriangleAndSquareTriangleSections()) {
            for (Point point : points) {
                g.setColor(Color.RED);
                g.fillOval(point.getX() - 9 + Display.LEFT_BUFFER, point.getY() - 9 + Display.TOP_BUFFER, 9 * 2, 9 * 2);
            }
        }
         */

        //Draw lines where sections are
        /*
        for(LinkedList<Line> section : ArrangementProperties.getAsLines(ArrangementProperties.getLineSections()))
        {
            for(Line line : section)
            {
                if(section.size() == 3) {
                    g.setColor(Color.YELLOW);
                    line.draw(g);
                }
                if(section.size() == 4)
                {
                    g.setColor(Color.MAGENTA);
                    line.draw(g);
                }
            }
        }

        for(LinkedList<Line> sections : ArrangementProperties.getAsLines(ArrangementPropertyFunctions.getTriangleAndSquareQuadrilateralSections()))
        {
            for(Line line : sections)
            {
                

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                line.draw(g);
            }
        }

        for(LinkedList<Line> sections : ArrangementProperties.getAsLines(ArrangementPropertyFunctions.getTriangleAndSquareTriangleSections()))
        {
            for(Line line : sections)
            {
                g.setColor(Color.RED);
                line.draw(g);
            }
        }
         */

        //Draw circles where points from circle chains are.
        for (Point point : GraphArrangementPropertyFunctions.getPointsFromNodeChainsForCircles()) {
            if(GraphArrangementPropertyFunctions.pointContainedByRaysMethodForCircleCluster(point, circles)) {
                g.setColor(Color.BLACK);
            }
            else {
                g.setColor(Color.CYAN);
            }
            g.fillOval((int) (point.getX() * scalingFactor) - 6 + LEFT_BUFFER, (int) ((point.getY() - 6) * scalingFactor) + TOP_BUFFER, (int) (6 * 2 * scalingFactor), (int) (6 * 2 * scalingFactor));
        }

        //Draw lines from rays method.
        for(Line line : linesFromRaysMethod)
        {
            g.setColor(Color.BLACK);
            g.setStroke(new BasicStroke((int) (3 * scalingFactor)));
            line.draw(g);
        }


        //Draw nodes information at node locations.
        int yOffset = 100;
        int ySpacing = 50;

        LinkedList<LinkedList<Node>> circleNodes = Graph.getCircleNodes(circles);

        for(LinkedList<Node> nodesList : circleNodes)
        {
            g.drawString("", 100, yOffset+=ySpacing);
            if(nodesList != null) {
                for (Node node : nodesList) {
                    //g.drawString(node.toString(), 100, yOffset += ySpacing);
                    g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
                }
            }
        }

        //Display nodes graph as 2D array
        int xOffset = 600 + LEFT_BUFFER;
        yOffset = 100 + LEFT_BUFFER;
        ySpacing = (int) (50 * scalingFactor);

        circleNodes = Graph.getCircleNodes(circles);
        LinkedList<Node> nodes = Graph.getNodes(circleNodes);
        //int[][] nodesAsGraph = Graph.getCircleNodesAsGraph(circleNodes, nodes);
        boolean[][] nodesAsGraph = Graph.getCircleNodesAsBooleanGraph(circles, circleNodes, nodes);
        for(int x = 0 ; x < nodesAsGraph.length ; x++)
        {
            //g.drawString(nodes.get(x).toString(), xOffset, yOffset);

            yOffset+=ySpacing;
            for(int y = 0 ; y < nodesAsGraph[x].length ; y++)
            {
                g.drawString(nodesAsGraph[x][y] + "", xOffset += ySpacing, yOffset);
            }
            xOffset -= nodesAsGraph[x].length * ySpacing;
        }


        //Display points between nodes.
        LinkedList<LinkedList<Node>> circleNodes2 = Graph.getCircleNodes(circles);
        LinkedList<Node> nodes2 = Graph.getNodes(circleNodes2);

        LinkedList<Node> booleanNodes = Graph.getBooleanNodesForCircleGraph(circles, circleNodes2, nodes2);

        for(Node node : booleanNodes)
        {
            

        g.setColor(MyColor.getColor("levelPropertySolved"));;
            g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
            g.drawOval((int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER, 5, 5);
        }



        //Draw circles where points from Triangle square chains are.
        for (Point point : GraphArrangementPropertyFunctions.getPointsFromNodeChainsForLineShapes()) {
            if(GraphArrangementPropertyFunctions.pointContainedByRaysMethodForCircleCluster(point, circles)) {
                g.setColor(Color.BLACK);
            }
            else {
                g.setColor(Color.CYAN);
            }
            g.fillOval((int) (point.getX() * scalingFactor) - 6 + LEFT_BUFFER, (int) ((point.getY() - 6) * scalingFactor) + TOP_BUFFER, (int) (6 * 2 * scalingFactor), (int) (6 * 2 * scalingFactor));
        }

        //Draw nodes information at node locations.
        yOffset = 100;
        ySpacing = 50;

        LinkedList<LinkedList<Node>> lineShapeNodes = Graph.getTriangleAndSquareNodes(getLineShapes());

        for(LinkedList<Node> nodesList : lineShapeNodes)
        {
            g.drawString("", 100, yOffset+=ySpacing);
            if(nodesList != null) {
                for (Node node : nodesList) {
                    //g.drawString(node.toString(), 100, yOffset += ySpacing);
                    g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
                }
            }
        }

        //Display points between nodes.
        LinkedList<LinkedList<Node>> lineShapeNodes2 = Graph.getTriangleAndSquareNodes(getLineShapes());
        LinkedList<Node> nodes3 = Graph.getNodes(lineShapeNodes2);

        LinkedList<Node> booleanNodes2 = Graph.getBooleanNodesForLineShapeGraph(getLineShapes(), lineShapeNodes2, nodes3);

        for(Node node : booleanNodes2)
        {
            

        g.setColor(MyColor.getColor("levelPropertySolved"));;
            g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
            g.drawOval((int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER, 5, 5);
        }

        //Draw circles where points from circle chains are.
        for (Point point : GraphArrangementPropertyFunctions.getPointsFromNodeChainsForLines()) {
            if(GraphArrangementPropertyFunctions.pointContainedByRaysMethodForCircleCluster(point, circles)) {
                g.setColor(Color.BLACK);
            }
            else {
                g.setColor(Color.CYAN);
            }
            g.fillOval((int) (point.getX() * scalingFactor) - 6 + LEFT_BUFFER, (int) ((point.getY() - 6) * scalingFactor) + TOP_BUFFER, (int) (6 * 2 * scalingFactor), (int) (6 * 2 * scalingFactor));
        }

        //Draw nodes information at node locations.
        yOffset = 100;
        ySpacing = 50;

        LinkedList<LinkedList<Node>> lineNodes = Graph.getLineNodes(lines);

        for(LinkedList<Node> nodesList : lineNodes)
        {
            g.drawString("", 100, yOffset+=ySpacing);
            if(nodesList != null) {
                for (Node node : nodesList) {
                    //g.drawString(node.toString(), 100, yOffset += ySpacing);
                    g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
                }
            }
        }

        //Display points between nodes.
        LinkedList<LinkedList<Node>> lineNodes2 = Graph.getLineNodes(lines);
        LinkedList<Node> nodes4 = Graph.getNodes(lineNodes2);

        LinkedList<Node> booleanNodes3 = Graph.getBooleanNodesForLineGraph(lines, lineNodes2, nodes4, ComplexArrangementPropertyFunctions.getDefinitelyContainedPointsForRegions(ArrangementProperties.intersections, ArrangementProperties.lineSections));

        for(Node node : booleanNodes3)
        {
            

        g.setColor(MyColor.getColor("levelPropertySolved"));;
            g.drawString(node.toString(), (int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER);
            g.drawOval((int) (node.point.getX() * scalingFactor) + LEFT_BUFFER, (int) (node.point.getY() * scalingFactor) + TOP_BUFFER, 5, 5);
        }
    }

    public static void displaySideBarInLevelMap(Graphics2D g)
    {
        g.setStroke(new BasicStroke((int) (2 * scalingFactor)));
        g.setColor(MyColor.getColor("bar"));
        fillRectangle(sideBarRectangle, g);
        g.setColor(MyColor.getColor("barOutline"));
        drawRectangle(sideBarRectangle, g);

        homeButton.setY((int) (0 * scalingFactor));
        //backButton.setY(Display.SIDE_BAR_BUTTONS_VERTICAL_DISTANCE * -2);
        //pauseButton.setY(TOP_BUFFER + SIDE_BAR_BUTTONS_DISTANCE);
        //settingsButton.setY(TOP_BUFFER + SIDE_BAR_BUTTONS_DISTANCE * 2);

        homeButton.display(g);
        backButton.display(g);
        questionButton.display(g);
        //pauseButton.display(g);
        //settingsButton.display(g);
    }

    public static void displaySideBarInLevel(Graphics2D g)
    {
        g.setStroke(new BasicStroke((int) (2 * scalingFactor)));
        g.setColor(MyColor.getColor("bar"));
        fillRectangle(sideBarRectangle, g);
        g.setColor(MyColor.getColor("barOutline"));
        drawRectangle(sideBarRectangle, g);

        //homeButton.setY(0);
        //backButton.setY(SIDE_BAR_BUTTONS_VERTICAL_DISTANCE * 1);
        //pauseButton.setY(TOP_BUFFER + SIDE_BAR_BUTTONS_DISTANCE * 2);
        homeButton.display(g);
        backButton.display(g);
        questionButton.display(g);
        //pauseButton.display(g);
        //settingsButton.display(g);
    }

    public static void displayWires(Graphics2D g)
    {
        for(int x = 0 ; x < wires.size() ; x++)
        {
            g.setColor(Color.BLACK);
            wires.get(x).draw(g);
        }
    }

    public static void displaySymbolsBar(Graphics2D g)
    {
        displaySymbolsBarRectangle(g);
        displaySymbolsBarText(g);
    }

    public static void displaySymbolsBarRectangle(Graphics2D g)
    {
        g.setStroke(new BasicStroke(2));
        g.setColor(MyColor.getColor("bar"));
        fillRectangle(symbolsBarRectangle, g);
        g.setColor(MyColor.getColor("barOutline"));
        drawRectangle(symbolsBarRectangle, g);
    }

    public static void displaySymbolsBarText(Graphics2D g)
    {
        //Include LEFT_BUFFER and TOP_BUFFER
        g.setColor(Color.BLACK);
        g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));

        //We need to have the xOffset value, then add the xSpacing value for each extra property. We need to figure out what the xSpacing value should be for two and three properties. We need to figure out the
        //xOffset for one, two, and three properties.

        int xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 66 * scalingFactor) + LEFT_BUFFER;
        int yOffset = (int) (symbolsBarRectangle.getY() * scalingFactor + 42 * scalingFactor) + TOP_BUFFER;

        int xSpacing = (int) (338 * scalingFactor);


        LevelPart levelPart = Level.getLevelPart();
        currentShapeType = levelPart.getShapeType();

        int numberOfCorrectProperties = 0;

        if(ArrangementProperties.getNumberOfShapes() > 0)
        {
            ArrangementProperties.setShapeDrawn(true);
        }

        if(!ArrangementProperties.wasShapeDrawn() && ArrangementProperties.hasUndoPerformed())
        {
            ArrangementProperties.setUndoPerformed(false);
        }
        if(!ArrangementProperties.wasShapeDrawn() && ArrangementProperties.hasClearPerformed())
        {
            ArrangementProperties.setClearPerformed(false);
        }

        //g.drawString("Number of properties: " + levelPart.getNumberOfProperties(), 500, 500);


        LinkedList<Property> properties = levelPart.getProperties();

        if(properties.size() == 1)
        {
            xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 550 * scalingFactor) + LEFT_BUFFER;
            xSpacing = 0;
        }
        else if(properties.size() == 2)
        {
            xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -350 * scalingFactor) + LEFT_BUFFER;
            xSpacing = (int) (550 * scalingFactor);
        }
        else if(properties.size() == 3)
        {
            xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -400 * scalingFactor) + LEFT_BUFFER;
            xSpacing = (int) (400 * scalingFactor);
        }

        if(properties.size() > 0) {
            if (properties.get(0).propertyAsString.equals("tutorial0"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 550 * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
            if (properties.get(0).propertyAsString.equals("tutorial1"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 537 * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
            if (properties.get(0).propertyAsString.equals("tutorial2"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + (548) * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
            if (properties.get(0).propertyAsString.equals("tutorial3"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + (548) * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
            if (properties.get(0).propertyAsString.equals("tutorial4"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 550 * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
            if (properties.get(0).propertyAsString.equals("tutorial5"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 550 * scalingFactor) + LEFT_BUFFER;
                xSpacing = 0;
            }
        }

        if(properties.size() > 1) {
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("d"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -290 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ts"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -330 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("qs"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -330 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("i"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -290 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("s"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -290 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("oe"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -290 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ie"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -290 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ci"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -355 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (550 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("ci") && properties.get(1).propertyAsString.equals("ie"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -500 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (660 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("ci") && properties.get(1).propertyAsString.equals("ts"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -490 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (640 * scalingFactor);
            }

        }

        if(properties.size() > 2) {
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ft") && properties.get(2).propertyAsString.equals("d"))
            {
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -300 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (400 * scalingFactor);
            }
            if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ci") && properties.get(2).propertyAsString.equals("ts"))
            {
                g.setFont(new Font("TimesRoman", Font.BOLD, (int) (25 * scalingFactor)));
                xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + -300 * scalingFactor) + LEFT_BUFFER;
                xSpacing = (int) (400 * scalingFactor);
            }
        }

        for(Property property : properties)
        {
            if(properties.size() > 2) {
                if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ft") && properties.get(2).propertyAsString.equals("d"))
                {
                    if(property.propertyAsString.equals("sh"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 120 * scalingFactor) + LEFT_BUFFER;
                    }
                    if(property.propertyAsString.equals("ft"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 527 * scalingFactor) + LEFT_BUFFER;
                    }
                    if(property.propertyAsString.equals("d"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 1000 * scalingFactor) + LEFT_BUFFER;
                    }
                    xSpacing = 0;
                }
                if (properties.get(0).propertyAsString.equals("sh") && properties.get(1).propertyAsString.equals("ci") && properties.get(2).propertyAsString.equals("ts"))
                {
                    g.setFont(new Font("TimesRoman", Font.BOLD, (int) (25 * scalingFactor)));

                    if(property.propertyAsString.equals("sh"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 100 * scalingFactor) + LEFT_BUFFER;
                    }
                    if(property.propertyAsString.equals("ci"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 430 * scalingFactor) + LEFT_BUFFER;
                    }
                    if(property.propertyAsString.equals("ts"))
                    {
                        xOffset = (int) (symbolsBarRectangle.getX() * scalingFactor + 950 * scalingFactor) + LEFT_BUFFER;
                    }
                    xSpacing = 0;
                }
            }



            g.setColor(Color.BLACK);
            if(property.getNumberOfShapes() > 0) {
                if (ArrangementProperties.getNumberOfShapes() == property.getNumberOfShapes()) {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }
                //g.drawString("Number of Shapes: " + property.getNumberOfShapes(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of " + currentShapeType + "s = " + property.getNumberOfShapes(), xOffset += xSpacing, yOffset);


            }

            g.setColor(Color.BLACK);
            if (property.isBasic()) {
                numberOfCorrectProperties++;
                

        g.setColor(MyColor.getColor("levelPropertySolved"));;

                //g.drawString("Is Basic: " + property.isBasic(), xOffset2, yOffset2+=yDifference);
                g.drawString("Is basic", xOffset += xSpacing, yOffset);
            }

            if (property.hasShapeMoved()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.hasShapeMoved())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Player moved a " + currentShapeType, xOffset += xSpacing, yOffset);
            }

            if (property.hasShapeDeleted()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.hasShapeDeleted())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Player deleted a " + currentShapeType, xOffset += xSpacing, yOffset);
            }


            if (property.hasActionPerformed()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.hasActionPerformed())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Player performed action", xOffset += xSpacing, yOffset);
            }

            if (property.hasClearPerformed()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.hasClearPerformed())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Player pressed clear", xOffset += xSpacing, yOffset);
            }

            if (property.hasUndoPerformed()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.hasUndoPerformed())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Player pressed undo", xOffset += xSpacing, yOffset);
            }


            g.setColor(Color.BLACK);
            if (property.isDistinct()) {
                if(!levelPart.isSolved()) {
                    boolean currentArrangementDistinct = LevelPart.isCurrentArrangementDistinct();
                    if (currentArrangementDistinct) {
                        currentArrangementDistinctAndUnmodified = true;
                    }
                }

                if(currentArrangementDistinctAndUnmodified)
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Is Distinct: " + property.isDistinct(), xOffset2, yOffset2+=yDifference);
                g.drawString("Arrangement is distinct", xOffset += xSpacing, yOffset);
            }

            if (property.formsTriangleSections()) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfTriangleSections() > 0)
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Forms three-sided sections", xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfTriangleSections() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfTriangleSections() == property.getNumberOfTriangleSections())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Triangle Sections: " + property.getNumberOfTriangleSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of three-sided sections = " + property.getNumberOfTriangleSections(), xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfQuadrilateralSections() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfQuadrilateralSections() == property.getNumberOfQuadrilateralSections())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Quadrilateral Sections: " + property.getNumberOfQuadrilateralSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of four-sided sections = " + property.getNumberOfQuadrilateralSections(), xOffset += xSpacing, yOffset);
            }


            if (property.getNumberOfIntersections() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfIntersections() == property.getNumberOfIntersections())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Intersections: " + property.getNumberOfIntersections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of intersections = " + property.getNumberOfIntersections(), xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfSections() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfSections() == property.getNumberOfSections())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Sections: " + property.getNumberOfSections(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of sections = " + property.getNumberOfSections(), xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfOutsideEdges() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfOutsideEdges() == property.getNumberOfOutsideEdges())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Outside Edges: " + property.getNumberOfOutsideEdges(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of outside edges = " + property.getNumberOfOutsideEdges(), xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfInsideEdges() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfInsideEdges() == property.getNumberOfInsideEdges())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Inside Edges: " + property.getNumberOfInsideEdges(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of inside edges = " + property.getNumberOfInsideEdges(), xOffset += xSpacing, yOffset);
            }

            if (property.getNumberOfContainedIntersections() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getNumberOfContainedIntersections() == property.getNumberOfContainedIntersections())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Inside Edges: " + property.getNumberOfInsideEdges(), xOffset2, yOffset2+=yDifference);
                g.drawString("Number of contained intersections = " + property.getNumberOfContainedIntersections(), xOffset += xSpacing, yOffset);
            }

            if (property.getTotalNumberOfEdges() != -1) {
                g.setColor(Color.BLACK);
                if(ArrangementProperties.getTotalNumberOfEdges() == property.getTotalNumberOfEdges())
                {
                    numberOfCorrectProperties++;
                    

        g.setColor(MyColor.getColor("levelPropertySolved"));;
                }

                //g.drawString("Number of Total Edges: " + property.getTotalNumberOfEdges(), xOffset2, yOffset2+=yDifference);
                g.drawString("Total number of edges = " + property.getTotalNumberOfEdges(), xOffset += xSpacing, yOffset);
            }

            if(property.isTheEnd())
            {
                numberOfCorrectProperties++;
            }
        }


        if(numberOfCorrectProperties == properties.size())
        {
            levelPart.setSolved(true);
        }

        g.setColor(Color.BLACK);
        //g.drawString("Level Part Solved: " + levelPart.isSolved(), xOffset2, yOffset2+=yDifference);
        //g.drawString("Level Part Currently Solved: " + currentlySolved, xOffset2, yOffset2+=yDifference);

    }

    public static void displayLevelBar(Graphics2D g)
    {
        g.setStroke(new BasicStroke((int) (2 * scalingFactor)));
        g.setColor(MyColor.getColor("bar"));
        fillRectangle(levelBarRectangle, g);
        g.setColor(MyColor.getColor("barOutline"));
        drawRectangle(levelBarRectangle, g);

        clearButton.display(g);
        undoButton.display(g);
    }

    public static void displayRedMessage(Graphics2D g)
    {
        g.setColor(Color.RED);
        g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));


        if(tooManyShapesCountdown >= 0 && tooManyShapesCountdown >= lastAddedShapeTooCloseCountdown && lastAddedShapeTooCloseCountdown >= lastAddedShapeOutsideWhiteAreaCountdown && lastAddedShapeTooCloseCountdown >= lastAddedShapeTooSmallCountdown) {
            g.drawString("This is the max number of shapes for this shape type.", 300, 700);
        }
        /*
        else if(lastAddedShapeTooCloseCountdown >= 0 && lastAddedShapeTooCloseCountdown >= lastAddedShapeOutsideWhiteAreaCountdown && lastAddedShapeTooCloseCountdown >= lastAddedShapeTooSmallCountdown) {

            g.drawString("No two lines, shapes, points, or intersections can coincide.", 300, 700);
        }
        else if(lastAddedShapeOutsideWhiteAreaCountdown >= 0 && lastAddedShapeOutsideWhiteAreaCountdown >= lastAddedShapeTooSmallCountdown)
        {
            g.drawString("Shapes cannot be created by releasing the mouse away from the white area.", 300, 700);
        }
        else if(lastAddedShapeTooSmallCountdown >= 0)
        {
            g.drawString("Shapes cannot be created too small.", 300, 700);
        }
        */
    }

    public static void resetCountdowns()
    {
        lastAddedShapeTooCloseCountdown = -1;
        lastAddedShapeOutsideWhiteAreaCountdown = -1;
        lastAddedShapeTooSmallCountdown = -1;
    }

    public static void fillRectangle(Rectangle rectangle, Graphics2D g)
    {
        g.fillRect((int) (rectangle.getX() * scalingFactor + LEFT_BUFFER), (int) (rectangle.getY() * scalingFactor + TOP_BUFFER), (int) (rectangle.getWidth() * scalingFactor), (int) (rectangle.getHeight() * scalingFactor));
    }

    public static void drawRectangle(Rectangle rectangle, Graphics2D g)
    {
        g.drawRect((int) (rectangle.getX() * scalingFactor + LEFT_BUFFER), (int) (rectangle.getY() * scalingFactor + TOP_BUFFER), (int) (rectangle.getWidth() * scalingFactor), (int) (rectangle.getHeight() * scalingFactor));
    }

    public static void displayTutorialText(Graphics2D g)
    {
        g.setColor(Color.BLACK);
        //g.setFont(new Font("TimesRoman", Font.BOLD, (int) (30 * scalingFactor)));
        g.setFont(new Font("TimesRoman", Font.BOLD, (int) (25 * scalingFactor)));


        if(Level.levelName.equals("tutorial"))
        {
            if(Level.levelPartNumber == 0)
            {
                g.drawString("Click, drag, and release the mouse to draw a shape.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
                g.drawString("Then, click the number 1 button to access the next level.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
            }
            if(Level.levelPartNumber == 1)
            {
                g.drawString("When drawing more than one shape,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
                g.drawString("No two shapes, points, lines, or intersections can completely coincide,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
                g.drawString("shapes cannot be too small, shapes cannot be finished outside of the white area of the screen,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 300 * scalingFactor));
                g.drawString("and there is a max number of each shape that you can draw.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 340 * scalingFactor));
            }
            if(Level.levelPartNumber == 2)
            {
                g.drawString("Right click the border of a shape to move it.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
                g.drawString("Once two thirds of level parts are completed, you can move on to the next set of levels", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
                g.drawString("by pressing the back button and then the level you would like to go to.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 300 * scalingFactor));
            }
            if(Level.levelPartNumber == 3)
            {
                g.drawString("Middle click the border of a shape to delete it.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
            }
            if(Level.levelPartNumber == 4)
            {
                g.drawString("Press the clear button or C on the keyboard to remove all shapes.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
            }
            if(Level.levelPartNumber == 5)
            {
                g.drawString("To undo an action such as drawing a shape, moving a shape, or deleting a shape,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
                g.drawString("Press the undo button or press Control and Z on the keyboard.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
                g.drawString("Once finished, press the back button.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 300 * scalingFactor));
            }
        }

        if(Level.levelName.equals("the end"))
        {
            g.drawString("You have completed Arrangement.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
            g.drawString("This game was made by Olivia Brobin,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
            g.drawString("and it was inspired by the video “How many ways can circles overlap?” by Numberphile", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 300 * scalingFactor));
            g.drawString("and the article “In how many ways can squares overlap?” by Felix Debon", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 340 * scalingFactor));

        }

        if(Level.levelName.equals("question"))
        {
            g.drawString("This is called Arrangement.", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 220 * scalingFactor));
            g.drawString("Arrangement was made by Olivia Brobin,", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 260 * scalingFactor));
            g.drawString("and it was inspired by the video “How many ways can circles overlap?” by Numberphile", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 300 * scalingFactor));
            g.drawString("and the article “In how many ways can squares overlap?” by Felix Debon", (int) (LEFT_BUFFER + 100 * scalingFactor), (int) (TOP_BUFFER + 340 * scalingFactor));

        }
    }

    public static void drawCenterLines(int screenWidth, int screenHeight, Graphics2D g)
    {
        g.setColor(Color.BLACK);
        g.fillRect((int)(screenWidth / 2) - 2,0, 4, 2000);
        g.fillRect(0,(int)(screenHeight / 2) - 2, 3000, 4);
    }
}
